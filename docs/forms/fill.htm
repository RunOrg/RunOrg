<page title="Fill a form"
      api="PUT /db/{db}/forms/{id}/filled/{owner}"
      js="method RunOrg.Form.Filled.Save"
      tags="methods:form.filled"
      parent="forms.htm" />

<doc for="js">
  If `filled` is an instance of [`RunOrg.Form.Filled`](/forms/filled.htm),
  then `filled.Save()` uploads its non-`id` fields to the server.

  Returns a [promise](/concepts/promise.htm) that will resolve to the
  `filled` object.
</doc>

<example type="js" caption="Example usage">

  var form_id = "1ax69bfa335";
  var owner_id = "0Et9j0026rO";
  
  var form = new RunOrg.Form(form_id);
  var filled = form.Fill(owner_id);

  filled.data = { "color" : "red" };

  filled.Save().then(function() {
    console.log("Form was filled.");
  });
</example>

<doc for="js">
  **Note**: it is not necessary to `Load()` either the form or the
  filled-form first.

  The following properties are sent to the server:
</doc>

<doc for="api">
  Fills an instance of form `{id}` bound to entity `{owner}`. 

  # Request
  
  The following properties are sent to the server:
</doc>

<fields>
  data | <dictionary> | Maps field names (as they are defined in the form itself)
                        to arbitrary JSON values which will be saved by RunOrg.
                        The expected contents of each field depend on the
                        [configuration](/forms/field.htm) of that field.
</fields>

<example type="api" caption="Example request">
  PUT /db/0SNQc00211H/forms/0SNQe0032JZ/filled/0SNxd0002JZ?as=0SNxd0002JZ
  Content-Type: application/json
    
  { "data" : { 
      "color": "Red",
      "birth": "1985-04-19" } }
</example>

<doc for="api">

  # Response

  Always returns `202 Accepted`: this is a [delayed](/concepts/delayed.htm),
  [idempotent](/concepts/idempotent.md) request.

  The response contains a single field:
</doc>
<fields for="api">
  at | <clock> | The [clock position](/concepts/delayed.htm) when the 
                 new data will be available in the form.
</fields>
<example type="api" caption="Example response">
  202 Accepted
  Content-Type: application/json
  
  { "at" : {"5":218} }
</example>

<doc>
  # Errors
  
  ## Returns `400 Bad Request`
  - if a required field was not provided or is `null`, `""`, `{}`
    or an empty array.
  - if a provided field does not exist in the form. 
  - if a provided field was not in the expected data format. 

  ## Returns `401 Unauthorized` 
  - if the provided token does not grant access as the named 
    person, or no token was provided

  ## Returns `403 Forbidden`
  - if person `{as}` is can view the form, but not fill the requested 
    instance. For instance, without **admin** access, a person may only
    fill the instance bound to himself (`{owner} == {as}`), and not to
    other persons. Access restrictions are defined for each type of 
    owner.
 
  ## Returns `404 Not Found`
  - if database `{db}` does not exist
  - if form `{id}` does not exist in database `{db}`
  - if person `{as}` is not allowed to view form `{id}`, to ensure 
    [absence equivalence](/concepts/absence-equivalence.htm). 

  # Access restrictions

  Person must have the **fill** [access level](/forms/audience.htm)
  access to the form, and be able to fill the instance.

  When owners are people, an instance may be filled only by its owner or
  by a person with **admin** access level.
</doc>
