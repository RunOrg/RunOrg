<page title="List all filled instances of a form"
      api="GET /db/{db}/forms/{id}/filled"
      js="method RunOrg.Form.List"
      tags="methods:form"
      parent="forms.htm" />

<doc for="js">
  If `form` is an instance of [`RunOrg.Form`](/forms/form.htm),
  then `form.List(limit,offset)` reads `limit` filled instances
  of that form, starting at `offset`. The order is unspecified but
  consistent.

  Returns a [promise](/concept/promise.htm) that will resolve to
  a list of [`RunOrg.Form.Filled`](/forms/filled.htm) objects.
</doc>

<example type="js" caption="Example usage">
  var form = new RunOrg.Form("");
  form.List(10, 0).then(function(list) {
    for (var i = 0; i < list.length; ++i) 
      console.log("Person %s answered %s", list[i].owner, list[i].data.q1)    
  });			
</example>

<doc for="api">
  Returns all the filled instances of form `{id}`, in an unspecified
  but consistent order, with [pagination](/concepts/pagination.htm).

  The response contains two fields:
</doc>
<fields caption="Response fields" for="api">
  | count | <int> | The total number of filled instances for this form.
  | list  | <filled> array | A list of filled form instances on the requested
      page, in [the same format as individual requests](/forms/get-filled.htm).    
</fields>
<example type="api" caption="Example request">
  GET /db/0SNQc00211H/forms/0SNQc00711H/filled?as=0Sd7003511H&limit=3&offset=213
</example>
<example type="api" caption="Example response">
  200 OK
  Content-Type: application/json 
     
  { "list" : [ { 
      "owner" : "0SNQe00311H",
      "data": { "color" : "Orange", "birth" : "1985-04-19" } 
    }, { 
      "owner" :  "0SNQe00311H",
      "data": { "birth" : "2013-10-08" }
    } ],
    "count": 215 }
</example>

<doc>
  # Errors
  
  ## Returns `401 Unauthorized` 
  - if the provided token does not authenticate the requester

  ## Returns `403 Forbidden`
  - if requester does not have **admin** access to the form.

  ## Returns `404 Not Found`
  - if database `{db}` does not exist
  - if form `{id}` does not exist in database `{db}` 
  - if requester cannot view form `{id}`

  # Access restrictions

  The **admin** [access level](/forms/audience.htm) is required to
  view all filled form instances.
</doc>
